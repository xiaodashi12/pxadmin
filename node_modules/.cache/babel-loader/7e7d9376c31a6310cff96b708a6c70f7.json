{"remainingRequest":"/Users/cjg/Vue/pxadmin/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!/Users/cjg/Vue/pxadmin/src/utils/common.js","dependencies":[{"path":"/Users/cjg/Vue/pxadmin/src/utils/common.js","mtime":1620526586669},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.last-index-of\";\nimport \"core-js/modules/es6.regexp.search\";\n\n/*\r\n * @Author: zhang_weidie\r\n * @LastEditors: jiangyihong\r\n * @Date: 2020-09-23 14:59:42\r\n * @Description: \r\n */\n// 获取地址栏url参数并对象化\nexport function getLocationSearchObj() {\n  var search = location.search.substring(1);\n\n  if (!search && location.href.lastIndexOf('?') > -1) {\n    search = location.href.substring(location.href.lastIndexOf('?') + 1);\n  }\n\n  var obj = {};\n\n  if (search.length > 0) {\n    var arr = [],\n        item;\n    arr = search.split('&');\n\n    for (var i = arr.length; --i >= 0;) {\n      item = arr[i].split('=');\n      obj[item[0]] = item[1];\n    }\n  }\n\n  return obj;\n} // 校验身份证\n\nexport function judgeIdCard(val) {\n  var bool = false;\n  var reg = /(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}$)/;\n\n  if (reg.test(val)) {\n    bool = true;\n  }\n\n  return bool;\n}\n/* \r\n * 只允许输入数字和. 用于处理一些金额 xxxx.xx\r\n * @param {Number | String} val 需要限制的内容\r\n * @param {Number} max 整数部分最大值 比如四位数：9999\r\n * @param {Number} num 是否有小数点，如果有小数点则为小数的最大数 比如两位小数: 99\r\n */\n\nexport function numberLimit(val, max, num) {\n  val = val.toString();\n  val = val.replace(/。/g, '.'); // 没有小数\n\n  if (!num) {\n    val = val.replace(/[^0-9]/g, '');\n    val = val > max ? max : val * 1;\n  } else {\n    // 有小数时限制\n    val = val.replace(/[^0-9.]/g, '');\n    var list = val.split('.');\n    var a = list[0];\n\n    if (list.length > 1) {\n      var b = list[1];\n      a = a > max ? max : a * 1;\n      b = b > num ? num : b.toString().slice(0, 2);\n\n      if (a >= max) {\n        b = '00';\n      }\n\n      val = (a || 0) + '.' + b;\n    } else {\n      a = a > max ? max : a === '' ? a : a * 1;\n      val = a;\n    }\n  }\n\n  return val;\n} // 经纬度转换成三角函数中度分表形式。\n\nfunction rad(d) {\n  return d * Math.PI / 180.0;\n} // 参考地址https://blog.csdn.net/zzjiadw/article/details/7031610\n\n/* \r\n * 计算点球上两点距离\r\n * @params {Number} lat1 第一个点纬度\r\n * @params {Number} lng1 第一个点纬度\r\n * @params {Number} lat2 第二个点纬度\r\n * @params {Number} lng2 第二个点纬度\r\n * @return 返回两点之间的距离，单位km\r\n*/\n\n\nexport function getDistance(lat1, lng1, lat2, lng2) {\n  var radLat1 = rad(lat1);\n  var radLat2 = rad(lat2);\n  var a = radLat1 - radLat2;\n  var b = rad(lng1) - rad(lng2);\n  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\n  s = s * 6378.137; // 地球半径 6378.137\n\n  s = Math.round(s * 10000) / 10000; //输出为公里\n  // s=s.toFixed(4)\n\n  return s;\n}\n/*\r\n * 将数字进行逗号拼接,每3位加一个逗号，支持小数(小数不做逗号处理) 123456.32 => 123,456.32\r\n * @params {Number | String} 需要处理的数值\r\n * @return 返回已拼接的数值\r\n*/\n\nexport function numJoint(val) {\n  if (val) {\n    val = val.toString(); // 是否包含小数\n\n    var idx = val.indexOf('.');\n    var point = '';\n\n    if (idx > 0) {\n      point = val.slice(idx);\n      val = val.slice(0, idx);\n      val = val.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n      val = val + point;\n    } else {\n      val = val.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n    }\n  }\n\n  return val;\n}",{"version":3,"sources":["/Users/cjg/Vue/pxadmin/src/utils/common.js"],"names":["getLocationSearchObj","search","location","substring","href","lastIndexOf","obj","length","arr","item","split","i","judgeIdCard","val","bool","reg","test","numberLimit","max","num","toString","replace","list","a","b","slice","rad","d","Math","PI","getDistance","lat1","lng1","lat2","lng2","radLat1","radLat2","s","asin","sqrt","pow","sin","cos","round","numJoint","idx","indexOf","point"],"mappings":"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","sourcesContent":["/*\r\n * @Author: zhang_weidie\r\n * @LastEditors: jiangyihong\r\n * @Date: 2020-09-23 14:59:42\r\n * @Description: \r\n */\r\n// 获取地址栏url参数并对象化\r\nexport function getLocationSearchObj () {\r\n  var search = location.search.substring(1)\r\n  if (!search && location.href.lastIndexOf('?') > -1) {\r\n    search = location.href.substring(location.href.lastIndexOf('?') + 1)\r\n  }\r\n  var obj = {}\r\n  if (search.length > 0) {\r\n    var arr = [], item\r\n    arr = search.split('&')\r\n    for (var i = arr.length; --i >= 0;) {\r\n      item = arr[i].split('=')\r\n      obj[item[0]] = item[1]\r\n    }\r\n  }\r\n  return obj\r\n}\r\n\r\n// 校验身份证\r\nexport function judgeIdCard (val) {\r\n  let bool = false\r\n  let reg = /(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}$)/\r\n  if (reg.test(val)) {\r\n    bool = true\r\n  }\r\n  return bool\r\n}\r\n\r\n/* \r\n * 只允许输入数字和. 用于处理一些金额 xxxx.xx\r\n * @param {Number | String} val 需要限制的内容\r\n * @param {Number} max 整数部分最大值 比如四位数：9999\r\n * @param {Number} num 是否有小数点，如果有小数点则为小数的最大数 比如两位小数: 99\r\n */\r\nexport function numberLimit (val, max, num) {\r\n  val = val.toString()\r\n  val = val.replace(/。/g, '.')\r\n  // 没有小数\r\n  if (!num) {\r\n    val = val.replace(/[^0-9]/g, '')\r\n    val = val > max ? max : val * 1\r\n  } else { // 有小数时限制\r\n    val = val.replace(/[^0-9.]/g, '')\r\n    let list = val.split('.')\r\n    let a = list[0]\r\n    if (list.length > 1) {\r\n      let b = list[1]\r\n      a = a > max ? max : a * 1\r\n      b = b > num ? num : b.toString().slice(0, 2)\r\n      if (a >= max) {\r\n        b = '00'\r\n      }\r\n      val = (a || 0) + '.' + b\r\n    } else {\r\n      a = a > max ? max : (a === '' ? a : a * 1)\r\n      val = a\r\n    }\r\n  }\r\n  return val\r\n}\r\n\r\n// 经纬度转换成三角函数中度分表形式。\r\nfunction rad (d){\r\n  return d * Math.PI / 180.0\r\n}\r\n\r\n// 参考地址https://blog.csdn.net/zzjiadw/article/details/7031610\r\n/* \r\n * 计算点球上两点距离\r\n * @params {Number} lat1 第一个点纬度\r\n * @params {Number} lng1 第一个点纬度\r\n * @params {Number} lat2 第二个点纬度\r\n * @params {Number} lng2 第二个点纬度\r\n * @return 返回两点之间的距离，单位km\r\n*/\r\nexport function getDistance (lat1, lng1, lat2, lng2) {\r\n  var radLat1 = rad(lat1)\r\n  var radLat2 = rad(lat2)\r\n  var a = radLat1 - radLat2\r\n  var b = rad(lng1) - rad(lng2)\r\n  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) +\r\n  Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)))\r\n  s = s * 6378.137 // 地球半径 6378.137\r\n  s = Math.round(s * 10000) / 10000 //输出为公里\r\n  // s=s.toFixed(4)\r\n  return s\r\n}\r\n\r\n/*\r\n * 将数字进行逗号拼接,每3位加一个逗号，支持小数(小数不做逗号处理) 123456.32 => 123,456.32\r\n * @params {Number | String} 需要处理的数值\r\n * @return 返回已拼接的数值\r\n*/\r\nexport function numJoint (val) {\r\n  if (val) {\r\n    val = val.toString()\r\n    // 是否包含小数\r\n    let idx = val.indexOf('.')\r\n    let point = ''\r\n    if (idx > 0) {\r\n      point = val.slice(idx)\r\n      val = val.slice(0, idx)\r\n      val = val.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,')\r\n      val = val + point\r\n    } else {\r\n      val = val.replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,')\r\n    }\r\n  }\r\n  return val\r\n}\r\n"]}]}