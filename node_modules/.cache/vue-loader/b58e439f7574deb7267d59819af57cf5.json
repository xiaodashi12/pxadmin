{"remainingRequest":"/Users/cjg/Vue/pxadmin/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!/Users/cjg/Vue/pxadmin/src/components/CustomMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/cjg/Vue/pxadmin/src/components/CustomMenu.vue","mtime":1620552893301},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cjg/Vue/pxadmin/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {getLocationSearchObj} from '@/utils/common.js'\r\nimport {mapMutations, mapGetters} from 'vuex'\r\nimport {clearLocalStorage} from '@/utils/auth.js'\r\nconst debounce = require('lodash/debounce')\r\nimport {menuList} from '@/api/menu-config.js'\r\nexport default {\r\n  name: 'CustomMenu',\r\n  data () {\r\n    return {\r\n      defaultActive: '', // 激活菜单项index值\r\n      menuList: menuList, // 菜单列表\r\n      searchList: [], // 搜索到的菜单列表(子菜单)\r\n      keyWord: '', // 搜索关键字\r\n      searchBox: false, // 搜索内容区域，显示隐藏\r\n      fromType: true, // true:显示原有内容， false:隐藏部分内容 是否嵌入到其他项目中，需要对应隐藏部分内容(菜单，header)\r\n    }\r\n  },\r\n  watch: {\r\n    keyWord (val) {\r\n      if (val !== '' && val !== undefined) {\r\n        this.searchBox = true\r\n        this.handleSearch()\r\n      } else {\r\n        this.searchBox = false\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations(['setOrgId', 'setCurrentMenu']),\r\n    // 清除分页信息\r\n    clearPagination () {\r\n      clearLocalStorage('picTxtIdx')\r\n      clearLocalStorage('picTxtSize')\r\n    },\r\n    // 搜索过滤菜单内容\r\n    handleSearch: debounce(function () {\r\n      this.$get('/menu/search', {\r\n        keyWord: this.keyWord\r\n      }).then(res => {\r\n        if (res.code === 200) {\r\n          this.searchList = res.data\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }, 200),\r\n    // 点击搜索后的菜单，滚动定位到已选项\r\n    handleScrollPosition () {\r\n      let el = document.querySelector('.custom-menu-container')\r\n      let top = el.scrollTop\r\n      let current = document.querySelector(`[data-index=${this.defaultActive}]`)\r\n      let y = current.getBoundingClientRect().y\r\n      top = top + y - 60 - 56\r\n      el.scrollTop = top\r\n    },\r\n    // 搜索菜单项点击\r\n    handleSearchMenuClick (item) {\r\n      this.keyWord = ''\r\n      this.searchBox = false\r\n      this.searchList = []\r\n      this.setCurrentMenu(item)\r\n      this.handleMenuClick(item)\r\n      this.defaultActive = item.index\r\n      setTimeout(() => {\r\n        this.handleScrollPosition()\r\n      }, 300)\r\n    },\r\n    // 切换页面路由\r\n    switchRouter (item) {\r\n      this.setCurrentMenu(item)\r\n      this.clearPagination()\r\n      this.$router.push({\r\n        path: item.componentName,\r\n        query: {\r\n          id: new Date().getTime()\r\n        }\r\n      })\r\n      let el = document.querySelector('.page-content .el-scrollbar__wrap')\r\n      if (el) {\r\n        el.scrollTop = 0\r\n      }\r\n    },\r\n    // 点击菜单项\r\n    handleMenuClick (item) {\r\n      this.switchRouter(item)\r\n    },\r\n    // 菜单栏展开\r\n    handleOpen(key, keyPath) {\r\n      // console.log(key, keyPath)\r\n    },\r\n    // 菜单栏收起\r\n    handleClose(key, keyPath) {\r\n      // console.log(key, keyPath)\r\n    },\r\n    // 初始化菜单列表\r\n    initMenu () {\r\n      // 0:默认框架页内加载(左侧菜单栏也需要对应)，1外部工具打开(第三方应用程序)，\r\n      // 2新窗口打开，3覆盖本窗口打开, 4云听后台的内容嵌入，(需要先登录,暂已改成默认管理员登录)\r\n      // 5 提示暂未开通 6应用中路由跳转\r\n      console.log(this.menuList)\r\n      let findShow = this.menuList.find(item => item.children.length>0)\r\n      if(findShow){\r\n        this.initDefaultActive()\r\n      }else{\r\n        // this.$router.push({\r\n        //   path:'/403'\r\n        // })\r\n      }\r\n      return;\r\n      // var type = current.openType\r\n      this.$get('/menu/getMenuList').then(res => {\r\n        if (res.code === 200 && res.data && res.data.length > 0) {\r\n          this.menuList = res.data\r\n          let findShow = this.menuList.find(item => item.children.length>0)\r\n          if(findShow){\r\n            this.initDefaultActive()\r\n          }else{\r\n            this.$router.push({\r\n              path:'/403'\r\n            })\r\n          }\r\n          \r\n        } else {\r\n          this.$router.push({\r\n            path:'/403'\r\n          })\r\n          // this.$message.error(res.msg)\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    },\r\n    // 设置激活的菜单项\r\n    initDefaultActive () {\r\n      let index, current\r\n      // 如果设置了激活某一项，则优先激活显示某个路由\r\n      let params = getLocationSearchObj()\r\n      if (params.menuId !== undefined) {\r\n        let list = this.menuList\r\n        list = list.map(item => {\r\n          return [item].concat(item.children)\r\n        })\r\n        list = list.flat(Infinity)\r\n        current = list.find(item => item.id == params.menuId)\r\n        index = current.id\r\n      } else {\r\n        // 使用第一个菜单项，如果有子菜单，则用子菜单的第一激活\r\n        for (let i = 0; i < this.menuList.length; i++) {\r\n          let item = this.menuList[i]\r\n          if (item.children && item.children.length > 0) {\r\n            current = item.children[0]\r\n            index = current.id\r\n            break\r\n          }\r\n        }\r\n      }\r\n      if (current) {\r\n        this.defaultActive = index\r\n        this.switchRouter(current)\r\n      }\r\n    },\r\n    init() {\r\n      let params = getLocationSearchObj()\r\n      this.fromType = params.from == 1 ? false : true // 判断是否隐藏左侧菜单 true是不隐藏 false的隐藏\r\n    },\r\n  },\r\n  created () {\r\n    this.initMenu() \r\n    this.init()\r\n  }\r\n}\r\n",{"version":3,"sources":["CustomMenu.vue"],"names":[],"mappingsfile":"CustomMenu.vue","sourceRoot":"src/components","sourcesContent":["<!--\r\n * @Description: 子应用菜单栏列表\r\n * @Author: jiangyihong\r\n * @Date: 2020-07-22 17:24:13\r\n * @LastEditors: jiangyihong\r\n-->\r\n<template>\r\n  <div class=\"custom-menu\" v-if=\"fromType\">\r\n    <!-- <div class=\"menu-title\">内容管理</div>\r\n    <div class=\"menu-search\">\r\n      <el-input\r\n        placeholder=\"搜索\"\r\n        v-model=\"keyWord\">\r\n        <i slot=\"suffix\" class=\"el-input__icon el-icon-search\"></i>\r\n      </el-input>\r\n      <div class=\"menu-search-container\" v-show=\"searchBox\">\r\n        <div class=\"menu-search-item\" v-for=\"item in searchList\"\r\n         :key=\"item.id\" @click=\"handleSearchMenuClick(item)\">{{item.title}}</div>\r\n        <div class=\"menu-search--empty\" v-show=\"searchList.length == 0\">暂无数据</div>\r\n      </div>\r\n    </div> -->\r\n    <el-menu\r\n      :default-active=\"defaultActive\"\r\n      class=\"custom-menu-container\"\r\n      @open=\"handleOpen\"\r\n      @close=\"handleClose\">\r\n      <div v-for=\"(item, index) in menuList\" :key=\"index\">\r\n        <el-submenu v-if=\"item.children.length >= 0\" :index=\"item.id\">\r\n          <template slot=\"title\">{{item.name}}</template>\r\n          <el-menu-item :index=\"String(child.id)\" @click=\"handleMenuClick(child)\"\r\n            :data-index=\"child.id\"\r\n            v-for=\"(child, childIdx) in item.children\"\r\n            :key=\"childIdx\">{{child.name}}</el-menu-item>\r\n        </el-submenu>\r\n        <!-- <el-menu-item v-if=\"item.children.length === 0\"\r\n          :index=\"item.index\"\r\n          :data-index=\"item.index\"\r\n          @click=\"handleMenuClick(item)\">{{item.title}}</el-menu-item> -->\r\n      </div>\r\n    </el-menu>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {getLocationSearchObj} from '@/utils/common.js'\r\nimport {mapMutations, mapGetters} from 'vuex'\r\nimport {clearLocalStorage} from '@/utils/auth.js'\r\nconst debounce = require('lodash/debounce')\r\nimport {menuList} from '@/api/menu-config.js'\r\nexport default {\r\n  name: 'CustomMenu',\r\n  data () {\r\n    return {\r\n      defaultActive: '', // 激活菜单项index值\r\n      menuList: menuList, // 菜单列表\r\n      searchList: [], // 搜索到的菜单列表(子菜单)\r\n      keyWord: '', // 搜索关键字\r\n      searchBox: false, // 搜索内容区域，显示隐藏\r\n      fromType: true, // true:显示原有内容， false:隐藏部分内容 是否嵌入到其他项目中，需要对应隐藏部分内容(菜单，header)\r\n    }\r\n  },\r\n  watch: {\r\n    keyWord (val) {\r\n      if (val !== '' && val !== undefined) {\r\n        this.searchBox = true\r\n        this.handleSearch()\r\n      } else {\r\n        this.searchBox = false\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations(['setOrgId', 'setCurrentMenu']),\r\n    // 清除分页信息\r\n    clearPagination () {\r\n      clearLocalStorage('picTxtIdx')\r\n      clearLocalStorage('picTxtSize')\r\n    },\r\n    // 搜索过滤菜单内容\r\n    handleSearch: debounce(function () {\r\n      this.$get('/menu/search', {\r\n        keyWord: this.keyWord\r\n      }).then(res => {\r\n        if (res.code === 200) {\r\n          this.searchList = res.data\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }, 200),\r\n    // 点击搜索后的菜单，滚动定位到已选项\r\n    handleScrollPosition () {\r\n      let el = document.querySelector('.custom-menu-container')\r\n      let top = el.scrollTop\r\n      let current = document.querySelector(`[data-index=${this.defaultActive}]`)\r\n      let y = current.getBoundingClientRect().y\r\n      top = top + y - 60 - 56\r\n      el.scrollTop = top\r\n    },\r\n    // 搜索菜单项点击\r\n    handleSearchMenuClick (item) {\r\n      this.keyWord = ''\r\n      this.searchBox = false\r\n      this.searchList = []\r\n      this.setCurrentMenu(item)\r\n      this.handleMenuClick(item)\r\n      this.defaultActive = item.index\r\n      setTimeout(() => {\r\n        this.handleScrollPosition()\r\n      }, 300)\r\n    },\r\n    // 切换页面路由\r\n    switchRouter (item) {\r\n      this.setCurrentMenu(item)\r\n      this.clearPagination()\r\n      this.$router.push({\r\n        path: item.componentName,\r\n        query: {\r\n          id: new Date().getTime()\r\n        }\r\n      })\r\n      let el = document.querySelector('.page-content .el-scrollbar__wrap')\r\n      if (el) {\r\n        el.scrollTop = 0\r\n      }\r\n    },\r\n    // 点击菜单项\r\n    handleMenuClick (item) {\r\n      this.switchRouter(item)\r\n    },\r\n    // 菜单栏展开\r\n    handleOpen(key, keyPath) {\r\n      // console.log(key, keyPath)\r\n    },\r\n    // 菜单栏收起\r\n    handleClose(key, keyPath) {\r\n      // console.log(key, keyPath)\r\n    },\r\n    // 初始化菜单列表\r\n    initMenu () {\r\n      // 0:默认框架页内加载(左侧菜单栏也需要对应)，1外部工具打开(第三方应用程序)，\r\n      // 2新窗口打开，3覆盖本窗口打开, 4云听后台的内容嵌入，(需要先登录,暂已改成默认管理员登录)\r\n      // 5 提示暂未开通 6应用中路由跳转\r\n      console.log(this.menuList)\r\n      let findShow = this.menuList.find(item => item.children.length>0)\r\n      if(findShow){\r\n        this.initDefaultActive()\r\n      }else{\r\n        // this.$router.push({\r\n        //   path:'/403'\r\n        // })\r\n      }\r\n      return;\r\n      // var type = current.openType\r\n      this.$get('/menu/getMenuList').then(res => {\r\n        if (res.code === 200 && res.data && res.data.length > 0) {\r\n          this.menuList = res.data\r\n          let findShow = this.menuList.find(item => item.children.length>0)\r\n          if(findShow){\r\n            this.initDefaultActive()\r\n          }else{\r\n            this.$router.push({\r\n              path:'/403'\r\n            })\r\n          }\r\n          \r\n        } else {\r\n          this.$router.push({\r\n            path:'/403'\r\n          })\r\n          // this.$message.error(res.msg)\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    },\r\n    // 设置激活的菜单项\r\n    initDefaultActive () {\r\n      let index, current\r\n      // 如果设置了激活某一项，则优先激活显示某个路由\r\n      let params = getLocationSearchObj()\r\n      if (params.menuId !== undefined) {\r\n        let list = this.menuList\r\n        list = list.map(item => {\r\n          return [item].concat(item.children)\r\n        })\r\n        list = list.flat(Infinity)\r\n        current = list.find(item => item.id == params.menuId)\r\n        index = current.id\r\n      } else {\r\n        // 使用第一个菜单项，如果有子菜单，则用子菜单的第一激活\r\n        for (let i = 0; i < this.menuList.length; i++) {\r\n          let item = this.menuList[i]\r\n          if (item.children && item.children.length > 0) {\r\n            current = item.children[0]\r\n            index = current.id\r\n            break\r\n          }\r\n        }\r\n      }\r\n      if (current) {\r\n        this.defaultActive = index\r\n        this.switchRouter(current)\r\n      }\r\n    },\r\n    init() {\r\n      let params = getLocationSearchObj()\r\n      this.fromType = params.from == 1 ? false : true // 判断是否隐藏左侧菜单 true是不隐藏 false的隐藏\r\n    },\r\n  },\r\n  created () {\r\n    this.initMenu() \r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.custom-menu {\r\n  height: 100vh;\r\n}\r\n.menu-title {\r\n  height: 60px;\r\n  line-height: 60px;\r\n  font-size: 15px;\r\n  font-weight: 600;\r\n  color: #000000;\r\n  padding-left: 20px;\r\n  border-bottom: 1px solid #dcdfe6;\r\n  box-sizing: border-box;\r\n}\r\n.custom-menu-container {\r\n  height: calc(100% - 60px - 56px);\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n}\r\n.menu-search {\r\n  position: relative;\r\n  height: 56px;\r\n  padding: 12px 8px;\r\n  box-sizing: border-box;\r\n}\r\n.menu-search-container {\r\n  position: absolute;\r\n  top: 45px;\r\n  left: 8px;\r\n  width: 134px;\r\n  min-height: 178px;\r\n  max-height: 300px;\r\n  border-radius: 4px;\r\n  border: 1px solid #DCDFE6;\r\n  z-index: 200;\r\n  background: #FFF;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  box-sizing: border-box;\r\n}\r\n.menu-search-item {\r\n  height: 40px;\r\n  line-height: 40px;\r\n  padding-left: 30px;\r\n  min-width: auto;\r\n  cursor: pointer;\r\n  box-sizing: border-box;\r\n  &:hover {\r\n    background-color: #E6E6E6 !important;\r\n    color: #303133 !important;\r\n  }\r\n}\r\n.menu-search--empty {\r\n  text-align: center;\r\n  padding-top: 40px;\r\n  color: #909399;\r\n}\r\n</style>\r\n"]}]}